-- Intermediate Problems

-- 20. Categories, and the total products in each category
/*
   For this problem, we’d like to see the total number of products in each
   category. Sort the results by the total number of products, in descending
   order.
*/  
select category_name, count(product_id) as no_of_products from categories join products on categories.category_id = products.category_id group by category_name order by product_id desc;

-- 21. Total customers per country/city
select country, city, count(customer_id) as no_of_customers from customers group by country, city order by count(customer_id) desc;

-- 22. Products that need reordering
/* 
   What products do we have in our inventory that should be reordered?
   For now, just use the fields UnitsInStock and ReorderLevel, where
   UnitsInStock is less than the ReorderLevel, ignoring the fields
   UnitsOnOrder and Discontinued.
   Order the results by ProductID.
*/
select * from products;
select product_id, product_name, units_in_stock, reorder_level from products where (units_in_stock + units_on_order) <= reorder_level order by product_id;

-- 23. Products that need reordering, continued
/*
   Now we need to incorporate these fields—UnitsInStock, UnitsOnOrder,
   ReorderLevel, Discontinued—into our calculation. We’ll define
   “products that need reordering” with the following:
   UnitsInStock plus UnitsOnOrder are less than or equal to
   ReorderLevel
   The Discontinued flag is false (0).
*/
select product_id, product_name, units_in_stock, units_on_order, reorder_level, discontinued from products where(units_in_stock+units_on_order) <= reorder_level and discontinued = 0;  

-- 24. Customer list by region
select * from customers;
select region, company_name, customer_id from customers group by region, company_name order by count(*);

-- 25. High freight charges
/*
   Some of the countries we ship to have very high freight charges. We'd
   like to investigate some more shipping options for our customers, to be
   able to offer them lower freight charges. Return the three ship countries
   with the highest average freight overall, in descending order by average
   freight.
*/

select ship_country, avg(freight) as average_freight from orders group by ship_country order by average_freight desc limit 3;

-- 26. High freight charges - 2015
/*
   We're continuing on the question above on high freight charges. Now,
   instead of using all the orders we have, we only want to see orders from
   the year 2015.
*/

select 
      Ship_Country, 
      avg(freight) as Average_Freight
from orders
where order_date >= '2015-01-01' and order_date<='2015-01-01'
group by Ship_country 
order by Average_Freight desc;

-- 27. High freight charges with between
/*
   Another (incorrect) answer to the problem above is this:
   Select Top 3
   ShipCountry,AverageFreight = avg(freight)
   From Orders
   Where OrderDate between '1/1/2015' and '12/31/2015'
   Group By ShipCountry
   Order By AverageFreight desc;
   Notice when you run this, it gives Sweden as the ShipCountry with the
   third highest freight charges. However, this is wrong - it should be
   France.
   What is the OrderID of the order that the (incorrect) answer above is missing?
*/

select 
       Order_ID,
	   avg(freight) as Average_Freight
from orders
where order_date between '2015-01-01' and '2015-12-31'
group by order_id
order by average_freight desc;
-- 28. High freight charges - last year
select ship_country, avg(freight) as avrage_frienght from orders where order_date > (select dateadd(yy,-1,max(order_date)) from orders)
group by ship_country
order by average_freight desc limit 3;

-- 29. Inventory list
select * from order_details;
select * from products;
select * from orders;
select * from employees;
select OD.order_id, P.product_id, E.employee_id, E.first_name
    from order_details as OD
    left join products as P
         on OD.product_id = P.product_id
	left join orders as O
		on OD.order_id = O.order_id
	left join employees as E
        on O.employee_id = E.employee_id
	order by OD.order_id, OD.product_id;
    
-- 30. Customers with no orders
select * from orders;
select * from customers;
select customers.customer_id as customers_customer_id, orders.customer_id as orders_customer_id
    from customers
    left join orders 
        on customers.customer_id = orders.customer_id
		where order_id is null;


-- 31. Customers with no orders for EmployeeID 4
select * from customers;
select * from orders;
select distinct c.customer_id as customers_customer_id, o.customer_id as orders_customer_id
    from customers as c
        left join orders as o
            on c.customer_id = o.customer_id
            where c.customer_id not in( 
				select distinct c.customer_id 
				from customers as c
                     left join orders as o
                     on c.customer_id = o.customer_id
					 where employee_id = 4);			
